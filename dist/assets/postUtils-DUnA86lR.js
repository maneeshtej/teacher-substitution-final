import{l as g}from"./recentFunctionUtils-DfT13bYP.js";import{s as c}from"./App-BarifcCs.js";const n=[];for(let t=0;t<256;++t)n.push((t+256).toString(16).slice(1));function p(t,e=0){return(n[t[e+0]]+n[t[e+1]]+n[t[e+2]]+n[t[e+3]]+"-"+n[t[e+4]]+n[t[e+5]]+"-"+n[t[e+6]]+n[t[e+7]]+"-"+n[t[e+8]]+n[t[e+9]]+"-"+n[t[e+10]]+n[t[e+11]]+n[t[e+12]]+n[t[e+13]]+n[t[e+14]]+n[t[e+15]]).toLowerCase()}let u;const m=new Uint8Array(16);function b(){if(!u){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");u=crypto.getRandomValues.bind(crypto)}return u(m)}const _=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),a={randomUUID:_};function y(t,e,o){var s;if(a.randomUUID&&!t)return a.randomUUID();t=t||{};const r=t.random??((s=t.rng)==null?void 0:s.call(t))??b();if(r.length<16)throw new Error("Random bytes length must be >= 16");return r[6]=r[6]&15|64,r[8]=r[8]&63|128,p(r)}const x=async t=>{if(!t||Object.keys(t).length===0)return i("No data provided");const e=y(),o=await h(t,e);return o.length===0?i("No valid substitutions to insert"):(console.log("Inserting into Supabase:",o),S(o,e))},h=async(t,e)=>(await Promise.all(Object.values(t).map(async(r,s)=>!r.teacher_id||!r.sub_teacher_id?(console.error(`Error at index ${s}: Missing teacher_id or sub_teacher_id`),null):{teacher_id:Number(r.teacher_id),sub_teacher_id:Number(r.sub_teacher_id),class_id:Number(r.class_id),date_of_period:new Date(r.date_of_period).toISOString(),status:"pending",state:"incomplete",reason:"Medical leave",re_sub:!1,group_id:e}))).filter(Boolean),S=async(t,e)=>{try{const{data:o,error:r}=await c.from("Substitution").insert(t);return r?i("Supabase Insert Error:",r):(console.log("Successfully inserted into Supabase:",o),w(t,e,o))}catch(o){return i("Unexpected error:",o.message||"Unknown error")}},w=async(t,e,o)=>{const{data:r,error:s}=await c.from("Substitution").select("class_id").eq("group_id",e);if(s||!(r!=null&&r.length))return i("Error fetching class_ids for logging:",s);const d=r.map(l=>l.class_id);return await g("ADD",t[0].teacher_id,d),{data:o,error:null}},i=(t,e=null)=>(console.error(t,e||""),{data:null,error:t});export{x as s};
